#summary 토비의 스프링, 2부 선택 - 10장 IoC 컨테이너와 DI

<wiki:toc max_depth="2" />

= 정리 =

== 10.1 IoC 컨테이터: 빈 팩토리와 애플리케이션 컨텍스트 ==

=== IoC컨테이너 정의 ===
 * 오브젝트의 생성과 관계설정, 사용, 제거 등의 작업을 컨테이너가 담당
 * 오브젝트의 제어권을 컨테이너가 가지고 있어 IoC라 부름
 * 스프링 컨테이너를 Ioc컨테이너라고도 함
 * 스프링에선 IoC를 담당하는 컨테이너를 빈 팩토리 또는 애플리케이션 컨텍스트라고 부르기도함

 {{{
  public interface ApplicationContext extends ListableBeanFactory,
  HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher,
  ResourcePatternResolver {
 }}}

 * 스프링의 빈 팩토리와 애플리케이션 컨텍스트는 각각 기능을 대표하는 BeanFactory와 ApplicationContext라는 두 개의 인터페이스로 정의
 * 스프링 컨테이너 또는 IoC 컨테이너라고 말하는 것은 바로 이 ApplicationContext 인터페이스를 구현한 클래스의 오브젝트

=== IoC컨테이너를 이용해 애플리케이션 만들기 ===

{{{
 StaticApplicationContext ac = new StaticApplicationContext();
}}}

 * ApplicationContext 인터페이스를 구현한 클래스인 StaticApplicationContextdml 오브젝트 생성
 * 본격적인 IoC 컨테이너로서 동작하려면 POJO클래스와 설정 메타정보 필요

==== POJO 클래스 ====
 * POJO는 특정 기술과 스펙에서 독립적일뿐더러 의존관계에 있는 다른 POJO와 느슨한 결합을 갖도록 만듬.

==== 설정 메타정보 ====
 * IoC 컨테이너의 가장 기초적인 역할은 오브젝트를 생성하고 이를 관리
 * 스프링 컨테이너가 관리하는 이런 오브젝트는 빈이라 부름 
 * 스프링의 설정 메타정보는 XML 파일이 아님
 * 스프링의 설정 메타정보는 BeanDefinition 인터페이스로 표현되는 순수한 추상 정보
 * 애플리케이션 컨텍스트는 BeanDefinition으로 만들어진 메타정보를 담은 오브젝트를 사용해 IoC와 DI 작업 수행
 * 스프링의 메타정보는 특정한 파일 포맷이나 형식에 종속되지 않음 
 * 원본의 포맷과 구조, 자료의 특성에 맞게 읽어와 BeanDefinition 오브젝트로 변환해주는 BeanDefinitionReader있으면 됨

== 10.2 IoC/DI를 위한 빈 설정 메타정보 작성 ==



== 10.3 프로토타입과 스코프 ==


== 10.4 기타 빈 설정 메타정보 ==



= 생각하기 =