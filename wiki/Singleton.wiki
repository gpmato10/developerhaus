#summary 싱글톤

= Introduction =

== 싱글톤에 대한 내용정리 == 

* 일반적인 오브젝트 호출 

{{{

DaoFactory factory = new DaoFactory();
UserDao dao1 = factory.userDao();
UserDao dao2 = factory.userDao();

System.out.println(dao1);
System.out.println(dao2);

}}}

 출력결과
 {{{
  springbook.dao.UserDao@118f375
  springbook.dao.UserDao@117a8bd
 }}}

출력결과를 보면 각기 다른 오브젝트가 2개가 생성된다.
userDao를 매번 호출하면 새로운 오브젝트가 생성이 되고 힙 영역에 여러개의 객체가 올라간다.

* 애플리케이션 컨텍스트를 이용한 오브젝트 호출 
 {{{
   ApplicationContext context = 
                     new AnnotationConfigApplicationContext(DaoFactory.class);

   UserDao dao3 = context.getBean("userDao", UserDao.class);
   UserDao dao4 = context.getBean("userDao", UserDao.class);

   System.out.println(dao3);
   System.out.println(dao4);

}}}
 
 출력결과
 {{{
 springbook.dao.UserDao@ee22f7
 springbook.dao.UserDao@ee22f7
 }}}

스프링의 애플리케이션 컨텍스트를 이용한 방식으로 하면 매번 새로운 객체를 생성하지 않는다. 
이렇게 스프링은 기본적으로 빈 오브젝트를 모두 싱글톤으로 만든다. 

== 생각해보기 ==
스프링이 싱글톤으로 빈을 만드는 이유로 생각한것이 서버의 부하때문이라고 생각을 했었다. 매번 클라이언트가에서 요청할때마다 객체가 수십에서 수백만개씩 만들어지면 아무리 자바 오브젝트 생성과 가비지 컬렉션의 성능이 좋아졌다고 하더라도 부하가 걸리면 서버가 감당하기 힘들어서 싱글톤패턴이 적용됐다고 생각을 했다.
하지만 팀장님께서 서버부하가 주 이유이기 보다는 객체의 상태때문이라고 하신거 같다. 객체의 상태라고 하면 어떤거 의미하는지 좀 생각해봐야 겠다~

== 코멘트 == 

Comment by project member want813, Dec 08, 2010

스프링의 싱글톤은 진짜 싱글톤이 아니라, 싱글톤 레지스트리에서 싱글톤처럼 관리 해준다는 말씀이 기억나네요~
----
Comment by project member chanwook.god, Dec 10, 2010

조심해야 하는 것 중 하나는 비교 하다 보면 한 쪽이 나쁘다고 생각하는 겁니다.(저도 자주 그러죠..) 싱글톤도 마찬가지인 것 같습니다. 싱글톤을 잘못 사용해서 문제가 발생하는 경우가 있기 때문에 마치 싱글톤이 나빠보이는 경우가 많습니다. 하지만 싱글톤 방식은 구현 시 반드시 필요하며, 유용하게 사용할 수가 있죠. 여력이 된다면 싱글톤을 사용한 좋은 케이스를 공유하는 게 좋을 것 같습니다. 배경이 없는 좋다, 나쁘다 식의 정리는 혁씨가 말씀하신대로 단편적인 내용으로 자칫 오해를 일으킬 수가 있으니까요~(물론 성능 관점도 이유로 빠트릴 수야 없겠죠. 언제 이런 상황이 있는지를 생각해보면 좋을 것 같네요)
----
Comment by project member yours012, Dec 12, 2010

싱글톤을 사용해서 성능 향상을 얻을 수 있는 경우는 Service Locator 패턴을 사용해 DB의 DataSource?를 찾을때나 Ejb Home 객체를 찾을 때 소요되는 응답 속도를 감소시키기 위해서 사용됩니다. 최근에 사용했던 경우는 iBatis 만을 사용했던 프로젝트에서 SqlMapClient?를 공유하기 위해 사용했습니다.
----
Comment by project member chanwook.god, Dec 12, 2010

네. 물리적인 자원과 연결되거나 초기화 시점에 많은 자원을 소모하는 객체들의 경우에도 싱글톤을 사용한다고 볼 수 있겠죠^^. 광용씨께서 말씀하신 대표 EJB 빈 두기는 많이들 사용하는 방식인데, 곰곰히 생각해보면 사실 싱글톤 레지스트리와 비슷한 역할을 합니다. 기술적인 환경이나 적용 방식이 다를 뿐 결과적으로 하고자 하는 바는 같은 경우가 많죠. 그래서 저희도 스프링을 배우는 것도 중요하지만 스프링을 통해서 전체를 바라볼 수 있는 시야를 갖는 게 중요하다고 봅니다.
----
Comment by project member yours012, Dec 13, 2010

Service Locator에서 맵을 두고 한번 찾은 Ejb Home객체인 경우 맵에 보관 해 두었다가 차후 다시 호출할때 반환하죠. 이 부분이 싱글톤 레지스트리와 비슷한 역할을 한다고 팀장님이 말씀하시는것 같은데요. 예제를 책에서 본것 같은데 찾아서 올릴게요.

제가 맡은 부분도 부지런히 올리겠습니다. ㅡ.ㅡ;